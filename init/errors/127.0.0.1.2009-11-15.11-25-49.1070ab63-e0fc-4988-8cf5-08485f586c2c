(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/dave/web2py/applications/init/models/db.py'
p4
sS'code'
p5
S"# coding: utf8\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae: # if running on Google App Engine\n    from gluon.contrib.gql import *  \n    ### connect to Google BigTable\n    db = GQLDB()\n    ## and store sessions and tickets there\n    session.connect(request, response, db=db)\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db=MEMDB(Client()))\nelse: # else use a normal relational database\n    # if not, use SQLite or other DB\n    #db = SQLDB('sqlite://storage.sqlite')\n\tdb = SQLDB('mysql://root:mightydvd@192.168.1.101/spider')\n\n\n#########################################################################\n## uncomment the following line if you do not want sessions\n#session.forget()\n#########################################################################\n\n#########################################################################\n#define the audio table\ndb.define_table('audio',\n\tdb.Field('artist_name', 'string'),\n\tdb.Field('track_name', 'string'),\n\tdb.Field('artist_search_field', 'string'),\n\tdb.Field('track_search_field', 'string'),\n\tdb.Field('file_count', type='integer', default=1),\n\tmigrate=False)\n#define lenghts\ndb.audio.artist_name.length = 100\ndb.audio.track_name.length = 100\ndb.audio.artist_search_field.length = 300\ndb.audio.track_search_field.length = 300\n#define form attributes\ndb.audio.file_count.represent=False\n#define requirements\ndb.audio.artist_name.requires = IS_NOT_EMPTY()\ndb.audio.track_name.requires = IS_NOT_EMPTY()\n\n#define the audio_links table\ndb.define_table('audio_links',\n\tdb.Field('audio_id', 'integer'),\n\tdb.Field('domain', 'string'),\n\tdb.Field('url', 'string'),\n\tmigrate = False)\n#define lengths\ndb.audio_links.url.length = 800\n#define requirements\ndb.audio_links.requires = IS_NOT_EMPTY()\n\n#########################################################################\n\n#########################################################################\n## Here is sample code if you need:\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## comment/uncomment as needed\n#########################################################################\n\nexec('from applications.%s.modules.simple_auth import Auth as auth' %request.application)\nexec('from applications.%s.modules.mixtree_conf import *' %request.application)\nmixtree_conf = MixtreeConf(request)\n\n#from gluon.tools import *\n#auth=Auth(globals(),db)            # authentication/authorization\n#auth.define_tables()               # creates all needed tables\n#crud=Crud(globals(),db)            # for CRUD helpers using auth\n#service=Service(globals())         # for json, xml, jsonrpc, xmlrpc, amfrpc\n\n## uncomment as necessary or consult docs for more options\n#crud.settings.auth=auth           # (optional) enforces authorization on crud\n#mail=Mail()                                  # mailer\n#mail.settings.server='smtp.gmail.com:587'    # your SMTP server\n#mail.settings.sender='you@gmail.com'         # your email\n#mail.settings.login='username:password'      # your credentials\n#auth.settings.mailer=mail         # for user email verification\n#auth.settings.registration_requires_verification = True\n#auth.settings.registration_requires_approval = True\n#auth.messages.verify_email = \\\n#  'Click on the link http://.../verify_email/%(key)s to verify your email'\n"
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/dave/web2py/gluon/restricted.py", line 184, in restricted\n    exec ccode in environment\n  File "/home/dave/web2py/applications/init/models/db.py", line 20, in <module>\n    db = SQLDB(\'mysql://root:mightydvd@192.168.1.101/spider\')\n  File "/home/dave/web2py/gluon/sql.py", line 796, in __init__\n    self._pool_connection(lambda : MySQLdb.Connection(\n  File "/home/dave/web2py/gluon/sql.py", line 710, in _pool_connection\n    self._connection = f()\n  File "/home/dave/web2py/gluon/sql.py", line 802, in <lambda>\n    charset=charset,\n  File "/var/lib/python-support/python2.6/MySQLdb/__init__.py", line 74, in Connect\n    return Connection(*args, **kwargs)\n  File "/var/lib/python-support/python2.6/MySQLdb/connections.py", line 170, in __init__\n    super(Connection, self).__init__(*args, **kwargs2)\nOperationalError: (2003, "Can\'t connect to MySQL server on \'192.168.1.101\' (4)")\n'
p8
s.